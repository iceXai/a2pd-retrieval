# -*- coding: utf-8 -*-
"""
@author: Dr. Stephan Paul (AWI/iceXai; stephan.paul@awi.de)
"""


# In[] 
from abc import ABC, abstractmethod
from datetime import datetime, timedelta

from proc import ModisRetrievalProcessor

import os
import sys
import requests

import pandas as pd


# In[]


class Retrieval(ABC):
    """
    Abstract base class that handles the swath retrieval and post-processing 
    """
    def __init__(self, token: str, out: str):
        """
        Parameters
        ----------
        token : str
            LAADS authentication token for the download (to be generated at 
            https://ladsweb.modaps.eosdis.nasa.gov/)
        out : str
            Output directory path
        """
        #store arguements
        self.token = token
        self.out = out
        
    
    """ Setup """    
    def set_listing(self, listing: pd.DataFrame) -> None:
        """
        Parameters
        ----------
        listing : pd.DataFrame
            pandas DataFrame containing all swaths to download in the specific 
            format generated by the according Listing child class from the 
            listing module
        """
        self.swaths_to_download = listing
        
        
    """ High-level (abstract) functions """
    def download_swath(self,url: str, swath: str) -> bool:
        """
        Parameters
        ----------
        url : str
            sensor/carrier specific download url
        swath : str
            current swath name (also used for storing the file)

        Returns
        -------
        Bool :
            download successful? True/False
        """
     
        print(f'['+str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))+\
               f'] - Retrieving {swath}...')

        #requests call
        headers = {'Authorization': "Bearer {}".format(self.token)}
        r = requests.get(f'{url}{swath}', headers=headers)

        if r.status_code == 200:
            print('['+str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))+\
                  '] - Retrieval of swath complete!')
            #store downloaded swath
            with open(os.path.join(self.out, swath), "wb") as f:
                f.write(r.content)
            
            return True
        else:
            print('['+str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))+\
                  '] - Error with swath retrieval!')
        
            return False
    
    
    def load_swath(self) -> None:
        pass
    
    
    def save_swath(self) -> None:
        pass
    
    
    def resample_swath(self) -> None:
        pass
    
    
    def cleanup(self) -> None:
        pass

    
    @abstractmethod
    def setup_retrieval_processor(self) -> None:
        pass


    @abstractmethod
    def download_and_process_swaths(self) -> None:
        pass


class ModisRetrieval(Retrieval):
    """
    Terra/Aqua MODIS retrieval child class tailored to the 
    sensor-specific processing
    """
        
    def setup_retrieval_processor(self) -> None:
        self.proc = ModisRetrievalProcessor()
        # self.proc.set_swaths_to_download(self.swaths_to_download)
        self.proc.set_token(self.token)
        self.proc.set_output_path(self.out)
        self.proc.initialize_swath_data()
        self.proc.initialize_swath_io()
    
    
    def download_and_process_swaths(self) -> None:
        #parse swath listing to mitigate multiple downloads of the same 
        #file due to several AOIs being specified
        self.proc.parse_swath_listing()
        
        #loop over all files in listing
        for swath_entry in self.swaths_to_download:
            self.proc.get_swath_file(swath_entry)
        
        
        #download swath
        # url = self.swaths_to_download['url_mxd03'][0]
        # swath = self.swaths_to_download['mxd03'][0]
        # DOWNLOAD_COMPLETED = self.download_swath(url, swath)
        
        #continue with next date in case no file can be found or 
        #it already exists
        # if not DOWNLOAD_COMPLETED:
        #     ##TODO
        #     #log failures!
        #     continue
    
