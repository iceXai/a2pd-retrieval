# -*- coding: utf-8 -*-
"""
@author: Dr. Stephan Paul (AWI/iceXai; stephan.paul@awi.de)
"""


# In[] 
from abc import ABC, abstractmethod
from datetime import datetime, timedelta

from proc import ModisRetrievalProcessor

import os
import sys
import requests

import pandas as pd


# In[]

class Retrieval(ABC):
    """
    Abstract base class that handles the swath retrieval and post-processing 
    """
    def __init__(self, token: str, carrier: str, out: str):
        """
        Parameters
        ----------
        token : str
            LAADS authentication token for the download (to be generated at 
            https://ladsweb.modaps.eosdis.nasa.gov/)
        out : str
            Output directory path
        """
        #store arguements
        self.token = token
        self.out = out
        self.carrier = carrier
        
        #store status
        self.resampling = False
        
    
    """ Setup """    
    def set_listing(self, listing: pd.DataFrame) -> None:
        """
        Parameters
        ----------
        listing : pd.DataFrame
            pandas DataFrame containing all swaths to download in the specific 
            format generated by the according Listing child class from the 
            listing module
        """
        self.listing = listing
        
    def set_aoi(self, aoi: dict) -> None:
        """
        Parameters
        ----------
        aoi : dict
            python dictionary containing all the aoi-based information for the 
            resampling process by aoi tag
        """
        self.aoi = aoi
        
    def set_meta(self, meta: object) -> None:
        """
        Parameters
        ----------
        meta : object
            meta class correspomnding to the specified sensor/version
        """
        self.meta = meta
        
    def apply_resampling(self) -> None:
        self.proc.initialize_resampling()
        self.resampling = True


    """ Swath handling """
    def load_swath(self) -> None:
        #loop through all downloaded variables and import corresponding 
        #files/data
        variables_to_process = self.proc.get_variables()
        
        for var in variables_to_process:
            #open file link
            self.proc.open_swath(var)
            
            #retrieve content from group/variable
            self.proc.load_variable(var)
            
            #close file handle
            self.proc.close_swath()

    
    def save_swath(self) -> None:
        pass
    
    
    def resample_swath(self) -> None:
        #loop through all variables in the data and send it to the 
        #resample procedure
        variables_to_process = self.proc.get_resample_variables()
        
        for var in variables_to_process: 
            self.proc.group_data_to_resample(var)

        #apply the resampling
        self.proc.resample_swath()
    
    
    def cleanup(self) -> None:
        pass


    """ Abstract high-level methods """
    @abstractmethod
    def setup_retrieval_processor(self) -> None:
        pass


    @abstractmethod
    def download_and_process_swaths(self) -> None:
        pass


class ModisRetrieval(Retrieval):
    """
    Terra/Aqua MODIS retrieval child class tailored to the 
    sensor-specific processing
    """
        
    def setup_retrieval_processor(self) -> None:
        self.proc = ModisRetrievalProcessor()
        self.proc.set_token(self.token)
        self.proc.set_output_path(self.out)
        self.proc.set_aoi(self.aoi)
        self.proc.set_meta(self.meta)
        self.proc.initialize_swath_data()
        self.proc.initialize_swath_io()
    
    
    def download_and_process_swaths(self) -> None:
        #parse swath listing to mitigate multiple downloads of the same 
        #file due to several AOIs being specified
        self.swaths = self.proc.parse_swath_listing(self.listing)

        #check for previously or already downloaded and processed files
        # self.swaths = self.proc.check_for_existing_swaths(self.swaths)

        #loop over all swath listing entries
        for mxd03, mxd02 in self.swaths.itertuples(index=False):          
            #download the swath files
            DOWNLOAD_COMPLETED = self.proc.get_swath_files(mxd03, mxd02)

            #continue with next entry in case something went wrong
            if not all(DOWNLOAD_COMPLETED):
                ##TODO
                #log failures!
                continue
            
            #update the processor meta data once for the currently used swaths
            self.proc.update_meta_info((mxd03,mxd02))

            #load swath data
            self.load_swath()            

            #resample swath data if specified
            if self.resampling:
                #id aoi's for current swath
                self.proc.identify_resample_aois(self.listing, mxd03)
                #resample
                self.resample_swath()
            
            #save swath data to h5 format
            import pdb; pdb.set_trace()
            
            #clean-up afterwards
            
            


    
