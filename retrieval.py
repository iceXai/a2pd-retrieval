# -*- coding: utf-8 -*-
"""
@author: Dr. Stephan Paul (AWI/iceXai; stephan.paul@awi.de)
"""


# In[] 
from abc import ABC, abstractmethod
from datetime import datetime, timedelta

from proc import ModisRetrievalProcessor

import os
import sys
import requests

import pandas as pd


# In[]


class Retrieval(ABC):
    """
    Abstract base class that handles the swath retrieval and post-processing 
    """
    def __init__(self, token: str, out: str):
        """
        Parameters
        ----------
        token : str
            LAADS authentication token for the download (to be generated at 
            https://ladsweb.modaps.eosdis.nasa.gov/)
        out : str
            Output directory path
        """
        #store arguements
        self.token = token
        self.out = out
        
    
    """ Setup """    
    def set_listing(self, listing: pd.DataFrame) -> None:
        """
        Parameters
        ----------
        listing : pd.DataFrame
            pandas DataFrame containing all swaths to download in the specific 
            format generated by the according Listing child class from the 
            listing module
        """
        self.listing = listing
        

####################    
    
    def load_swath(self) -> None:
        pass
    
    
    def save_swath(self) -> None:
        pass
    
    
    def resample_swath(self) -> None:
        pass
    
    
    def cleanup(self) -> None:
        pass

    
    @abstractmethod
    def setup_retrieval_processor(self) -> None:
        pass


    @abstractmethod
    def download_and_process_swaths(self) -> None:
        pass


class ModisRetrieval(Retrieval):
    """
    Terra/Aqua MODIS retrieval child class tailored to the 
    sensor-specific processing
    """
        
    def setup_retrieval_processor(self) -> None:
        self.proc = ModisRetrievalProcessor()
        self.proc.set_token(self.token)
        self.proc.set_output_path(self.out)
        self.proc.initialize_swath_data()
        self.proc.initialize_swath_io()
        self.proc.initialize_swath_meta()
    
    
    def download_and_process_swaths(self) -> None:
        #parse swath listing to mitigate multiple downloads of the same 
        #file due to several AOIs being specified
        self.swaths = self.proc.parse_swath_listing(self.listing)

        #check for previously or already downloaded and processed files
        # self.swaths = self.proc.check_for_existing_swaths(self.swaths)

        #loop over all swath listing entries
        for mxd03, mxd02 in self.swaths.itertuples(index=False):          
            #download the swath files
            DOWNLOAD_COMPLETED = self.proc.get_swath_files(mxd03, mxd02)

            #continue with next entry in case something went wrong
            if not all(DOWNLOAD_COMPLETED):
                ##TODO
                #log failures!
                continue
            
            import pdb; pdb.set_trace()
            
            #load swath data
            
            
            #resample swath data if specified
            
            
            #save swath data to h5 format
            
            
            #clean-up afterwards
            
            


    
