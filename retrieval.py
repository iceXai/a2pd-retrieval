# -*- coding: utf-8 -*-
"""
@author: Dr. Stephan Paul (AWI/iceXai; stephan.paul@awi.de)
"""


# In[] 
from abc import ABC, abstractmethod
from loguru import logger

from proc import ModisRetrievalProcessor
from proc import SlstrRetrievalProcessor

import os
import sys

import pandas as pd


# In[]

class Retrieval(ABC):
    """
    Abstract base class that handles the swath retrieval and post-processing 
    """
    def __init__(self, cfg: object):
        """
        Parameters
        ----------
        cfg : object
            Configuration module loading/handling the config file
        """
        self.cfg = cfg
        #set processor
        self._initialize_retrieval_processor()
        
    """ Internals """
    @abstractmethod
    def _initialize_retrieval_processor(self) -> None:
        pass
    
    """ API for setup """    
    def set_listing(self, listing: pd.DataFrame) -> None:
        """
        Parameters
        ----------
        listing : pd.DataFrame
            pandas DataFrame containing all swaths to download in the specific 
            format generated by the according Listing child class from the 
            listing module
        """
        self.listing = listing
        
    """ Run """
    def run(self) -> None:
        #status
        logger.info(f'Retrieve and process swaths...')
        #parse swath listing to mitigate multiple downloads of the same 
        #file due to several AOIs being specified
        self.proc.parse_swath_listing(self.listing)

        #check for previously or already downloaded and processed files
        self.proc.check_for_existing_swaths()
        
        #receive the final, cleared-up swath listing
        LISTING = self.proc.get_listing()

        #loop over all listing entries
        for _, swath in LISTING.iterrows():          
            #make processor aware of currently processed swaths
            self.proc.set_swath_id(swath)
            
            #download the swath files
            DOWNLOAD_COMPLETED = self.proc.get_swath_file()

            #continue with next entry in case something went wrong
            if not DOWNLOAD_COMPLETED:
                continue

            #load swath data
            self.proc.load_swath()            

            #resample swath data if specified
            APPLY_RESAMPLING = self.cfg.do_resampling()
            if APPLY_RESAMPLING:
                #id aoi's for current swath
                self.proc.identify_resample_aois()
                #resample
                self.proc.resample_swath()

            #save swath data to h5 format
            self.proc.save_swath()

            #clean-up afterwards
            self.proc.cleanup()  
            

class ModisRetrieval(Retrieval):
    """
    Terra/Aqua MODIS retrieval child class tailored to the 
    sensor-specific processing
    """
    def _initialize_retrieval_processor(self) -> None:
        #status
        logger.info(f'Setup retrieval processor...')
        self.proc = ModisRetrievalProcessor(self.cfg) 
            

class SlstrRetrieval(Retrieval):
    """
    Sentinel3-A/B SLSTR retrieval child class tailored to the 
    sensor-specific processing
    """
    def _initialize_retrieval_processor(self) -> None:
        #status
        logger.info(f'Setup retrieval processor...')
        self.proc = SlstrRetrievalProcessor(self.cfg)    

